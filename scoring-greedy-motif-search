def Count(Motifs):
    count = {} # initializing the count matrix
    k = len(Motifs[0]) # length of the first kmer
    for symbol in "ACGT":
        count[symbol] = [] 
        for j in range(k):
            count[symbol].append(0) 
    t = len(Motifs) # length of Motifs, a list of kmers (strings)
    for i in range(t): # for each kmer in Motifs
        for j in range(k): # for each element of the kmer
            symbol = Motifs[i][j] # assigns the key to a ACGT in Motifs
            count[symbol][j] += 1 
    return count

# j-th symbol of consensus string = symbol corresponding to a maximum element in column j of Count(Motifs)
def Consensus(Motifs):
    k = len(Motifs[0]) # set k equal to the length of Motifs[0]
    count = Count(Motifs) # set count equal to the count matrix of Motifs.
    consensus = ""  # Initialise an empty consensus string
    for j in range(k): 
        m = 0
        frequentSymbol = ""
        for symbol in "ACGT":
            if count[symbol][j] > m: #maximum element of column j at step j is added to m
                m = count[symbol][j]
                freq_Symbol = symbol
        consensus += freq_Symbol
    return consensus

# Input:  A set of k-mers Motifs
# Output: The score of these k-mers
# To find the motif count with consensus
def Score(Motifs):
    consen = Consensus(Motifs)
    count = 0
    for m in Motifs:
        for index in range(len(m)):
            if m[index] != consen[index]:
                count += 1
    return count
# Input: A list of kmers Motifs
# Output: the profile matrix of Motifs, as a dictionary of lists
def Profile(Motifs):
    t = len(Motifs) # calculates the number of rows
    k = len(Motifs[0])
    profile = {}
    # insert your code here
    profile_Motif = Count(Motifs)
    for key in "ACGT":
        for key in profile_Motif:  
            profile[key] = [x / t for x in profile_Motif[key]] # This step divides elements of matrix with row count
    return profile
# Input:  String Text and profile matrix Profile
# Output: Probability of a text pattern in a probprofile

def Pr(Text, Profile):
    # insert your code here
    prob = 1
    for j in range(len(Text)):
        base = Text[j]
        prob *=Profile[base][j]
    return prob

# The profile matrix assumes that the first row corresponds to A, the second corresponds to C,
# the third corresponds to G, and the fourth corresponds to T.
# You should represent the profile matrix as a dictionary whose keys are 'A', 'C', 'G', and 'T' and whose values are lists of floats
def ProfileMostProbableKmer(Text, k, Profile):
    max_prob = 0
    most_prob_kmer = Text[:k] 
    n = len(Text)
    for i in range(n - k + 1): 
        kmer = Text[i: i + k]
        pr = Pr(kmer, Profile)#call function pr to get the probability of each k-mer
        if pr > max_prob:   
            max_prob = pr
            most_prob_kmer = kmer
    return most_prob_kmer
# Input:  A list of kmers Dna, and integers k and t (where t is the number of kmers in Dna)
# Output: GreedyMotifSearch(Dna, k, t)
def GreedyMotifSearch(Dna,k,t):
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
    n = len(Dna[0])
    for m in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][m:m+k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbableKmer(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs
