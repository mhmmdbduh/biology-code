# Copy your Score(Motifs), Count(Motifs), Profile(Motifs), and Consensus(Motifs) functions here.

### function Count(Motifs) that takes a list of strings Motifs as input and returns the count matrix of  Motifs (as a dictionary of lists) ###

def Count(Motifs):
    count = {} # initializing the count dictionary
    k = len(Motifs[0])
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
             count[symbol].append(0)
    t = len(Motifs)
    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            count[symbol][j] += 1
    return count

### function Profile(Motifs) that takes Motifs as input and returns their profile matrix as a dictionary of lists ###

# Input:  A list of kmers Motifs
# Output: the profile matrix of Motifs, as a dictionary of lists.
def Profile(Motifs):
    t = len(Motifs)
    k = len(Motifs[0])
    profile = {}
    profile = Count(Motifs)
    # insert your code here
    for i in profile:
        for j in range (k):
            profile [i][j] = profile [i][j]/t    
    return profile

    ### function Consensus(Motifs) that takes a list of strings Motifs as input and returns the consensus string of  Motifs. ###

   def Consensus(Motifs):

      k= len(Motifs[0])
      count = Count(Motifs)
      consensus = ""
      for j in range(k):
          m = 0
          frequentSymbol = ""
          for symbol in "ACGT":
              if count[symbol][j] > m:
                  m = count[symbol][j]
                  frequentSymbol = symbol
          consensus += frequentSymbol
      return consensus

    ### Function Scoring(Moifs) summing the number of symbols in the j-th column of Motifs that do not match the symbol in position j of the consensus string. ###

    def Score(Motifs):

      consensus = Consensus(Motifs)
      count = 0
      for motif in Motifs:
          for index in range(len(motif)):
              if motif[index] != consensus[index]:
                 count += 1
      return count
# Then copy your ProfileMostProbableKmer(Text, k, Profile) and Pr(Text, Profile) functions here.
# Input:  String Text and profile matrix Profile
# Output: Pr(Text, Profile)
def Pr(Text, Profile):
    p = 1
    for i in range(len(Text)):
        p = p * Profile[Text[i]][i]
    return p

def ProfileMostProbableKmer(text, k, profile): ## Find a Profile-most probable k-mer in a string  ### 
    kmer = ''
    t = len(text)
    prob_dict = {}
    for i in range(t-k+1):
        kmer = text[i:i+k]
        prob_dict[kmer] = Pr(kmer, profile)
        max_kmer = max(prob_dict, key = prob_dict.get)
    return max_kmer

def GreedyMotifSearch(Dna, k, t):
    # type your GreedyMotifSearch code here.
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
    n = len(Dna[0])
    for i in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][i:i+k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbableKmer(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotif
    
def GreedyMotifSearch(Dna, k, t):
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
        
    n = len(Dna[0])
    for i in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][i:i+k])
        #print(Motifs)
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            #print(P)
            Motifs.append(ProfileMostProbableKmer(Dna[j], k, P))
            
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    
    return BestMotifs
