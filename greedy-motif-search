# Input:  String Text and profile matrix Profile
# Output: Pr(Text, Profile)
def Pr(Text, Profile):
    p = 1
    for i in range(len(Text)):
        p = p * Profile[Text[i]][i]
    return p

def ProfileMostProbableKmer(text, k, profile): ## Find a Profile-most probable k-mer in a string  ### 
    kmer = ''
    t = len(text)
    prob_dict = {}
    for i in range(t-k+1):
        kmer = text[i:i+k]
        prob_dict[kmer] = Pr(kmer, profile)
        max_kmer = max(prob_dict, key = prob_dict.get)
    return max_kmer

def GreedyMotifSearch(Dna, k, t):
    # type your GreedyMotifSearch code here.
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
    n = len(Dna[0])
    for i in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][i:i+k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbableKmer(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotif
